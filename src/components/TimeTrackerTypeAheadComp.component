<apex:component controller="TimeTrackerTypeAheadCompCtrl">
    
    <apex:attribute name="searchBoxId" type="String" default="searchBox"
                    description="Id attribute for the search input box." />
    <apex:attribute name="styleClass" type="String"
                    description="CSS class attribute to apply on the search input box." />
    <apex:attribute name="style" type="String"
                    description="CSS style attribute to apply on the search input box." />
    <apex:attribute name="placeholder" type="String" default="Search Case By Case Number"
                    description="Text to display as a placeholder in the search input box." />
    
    <apex:attribute name="object" type="String" default="Contact"
                    description="The type of record we are searching." />
    <apex:attribute name="objectIdField" type="String" default="Id"
                    description="The field that provides the object Id." />
    <apex:attribute name="primaryField" type="String" default="Name"
                    description="The field that provides the primary display value." />
    <apex:attribute name="minSearchLength" type="Integer" default="2"
                    description="How many characters you must type before searching.  Must be 2 or more." />
    
    <apex:attribute name="recordLimit" type="String" default="5"
                    description="Maximum number of records to return to the list. " />
    
    <apex:attribute name="destinationForSelectedId" type="String"
                    description="Id of a field, such as an apex:inputHidden, that should get Salesforce Id of the selected item." />
    <apex:attribute name="destinationForSelectedValue" type="String"
                    description="Id of a field, such as an apex:inputHidden, that should get the displayed name/value of the selected item." />
    
    <apex:attribute name="stealFocus" type="Boolean" default="true"
                    description="Whether to automatically move the focus to the search box when the component is displayed." />
    
    <style>
        .twitter-typeahead {
        width: 100%;
        }
        
        .tt-search-box, .tt-query, .tt-hint {
        display: inline-block;
        width: 97%;
        font-size: inherit;
        height: 1.3em;
        padding: 8px 12px;
        line-height: 1.3em;
        border: 2px solid #ccc;
        -webkit-border-radius: 8px;
        -moz-border-radius: 8px;
        border-radius: 8px;
        outline: none;
        }
        
        .tt-search-box:focus {
        border: 2px solid #0097cf;
        }
        
        .tt-query {
        -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
        -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
        box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
        }
        
        .tt-hint {
        color: #fff;
        }
        
        .tt-dropdown-menu {
        width: 100%;
        margin-top: 5px;
        padding: 8px 0;
        z-index: 5;
        background-color: #fff;
        border: 1px solid #ccc;
        border: 1px solid rgba(0, 0, 0, 0.2);
        -webkit-border-radius: 8px;
        -moz-border-radius: 8px;
        border-radius: 8px;
        -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, .2);
        -moz-box-shadow: 0 5px 10px rgba(0, 0, 0, .2);
        box-shadow: 0 5px 10px rgba(0, 0, 0, .2);
        }
        
        .tt-suggestion {
        padding: 3px 20px;
        font-size: inherit;
        line-height: 1.5em;
        }
        
        .tt-suggestion.tt-cursor {
        color: #fff;
        background-color: #0097cf;
        }
        
        .tt-suggestion p {
        margin: 0;
        }
    </style>
    <script>
    var soslRegex = /%3F|%26|%7C|%7B|%7D|%5B|%5D|%5E|%3A|%5C|%22|%2B|['!\(\)~\*-]/g;
    
    // different typeaheads need their own data
    var boxData;
    var timeTrackerCtrl = {};
    
    if (!boxData) boxData = {};
    
    boxData['{!searchBoxId}'] = {
        setSelectedValue :
        function( ctrl, id, value ) {
            $(ctrl).attr('data-id', id);
            
            // if destinations are defined, set them too
            $('[id$={!destinationForSelectedId}]').val( id );
            $('[id$={!destinationForSelectedValue}]').val( value );
        },
        
        fieldList:
        ['{!objectIdField}', '{!primaryField}'],
        
        boxQuery:
        function( queryString, typeaheadCallback ) {
            let searchField;
            let showFields = [];
            timeTrackerCtrl.displayComponentDetails = window.selectedActivityDetails;
            timeTrackerCtrl.displayComponentDetails.filter = (timeTrackerCtrl.displayComponentDetails.filter) ?
                timeTrackerCtrl.displayComponentDetails.filter.replace(/&#39;/g,'\''): '';
            for (let i in timeTrackerCtrl.displayComponentDetails.fields) {
                let field = timeTrackerCtrl.displayComponentDetails.fields[i];
                if(field.search) {
                    searchField = field.field;
                }
                if(field.show) {
                    showFields.push(field.field);
                }
            }
            
            if(!timeTrackerCtrl.displayComponentDetails.displaySObject || !searchField || showFields.length <0 ) {
                console.log('Not calling typeahead bcz of this params : timeTrackerCtrl.displayComponentDetails.displaySObject',timeTrackerCtrl.displayComponentDetails.displaySObject,'searchField', searchField, 'showFields',showFields);
                return;
            }
            
            
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.TimeTrackerTypeAheadCompCtrl.searchRecords}',
                queryString,
                timeTrackerCtrl.displayComponentDetails.displaySObject,
                searchField,
                showFields,
                timeTrackerCtrl.displayComponentDetails.filter,
                '{!recordLimit}',
                function(result, event){
                    if (event.status) {
                        //console.log(result);
                        let dataList = [];
                        
                        $.each(result, function(i, r) {
                            let data = {};
                            data.id = r.{!objectIdField};
                            data.value = (function(){
                                let strReturn = '', separator = '';
                                for (let i=0; i< showFields.length; i++) {
                                    
                                    if( strReturn ) {
                                        separator = ' - ';
                                    }
                                    
                                    if( r[ showFields[ i ] ] ) {
                                        strReturn += separator + r[ showFields[ i ] ];
                                    }
                                }
                                return strReturn;
                            } ());
                            dataList.push( data );
                        });
                        typeaheadCallback( dataList );
                    } else {
                        // TODO: deal with error
                        console.log('Callout error: ' + event.message);
                        typeaheadCallback( [] );
                    }
                },
                {escape: false}
            );
        }
    };
    
    $(document).ready(function(){
        
        $('#{!searchBoxId}').typeahead({
            minLength: {!minSearchLength},
            hint: true,
            autoselect: true,
            highlight: true
        },
                                       {
                                           source: boxData['{!searchBoxId}'].boxQuery,	// calls our remoting function
                                           name: '{!searchBoxId}Typeahead',
                                       }).on('typeahead:selected', function (object, datum) {
            boxData['{!searchBoxId}'].setSelectedValue( this, datum.id, datum.value );
            // console.log('typeahead:selected => ' + datum.id);
        }).on('typeahead:autocompleted', function (object, datum) {
            boxData['{!searchBoxId}'].setSelectedValue( this, datum.id, datum.value );
        }).keyup( function(ev) {
            if ( ev.which == 8 || ev.which == 27 ) {
                boxData['{!searchBoxId}'].setSelectedValue( this, null, null );
            }
        });
        
        if ({!stealFocus}) $('#{!searchBoxId}').focus();
    });
    </script>
    
    <div>
        <input id="{!searchBoxId}" placeholder="{!placeholder}"
               class="{!styleClass}" />
    </div>
    
</apex:component>